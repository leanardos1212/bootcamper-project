/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.14.v20181114
 * Generated at: 2021-05-11 22:37:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class games_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    <!DOCTYPE html>\n");
      out.write("    <html>\n");
      out.write("\n");
      out.write("    <head>\n");
      out.write("        <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.7.8/angular.min.js\"></script>\n");
      out.write("        <script src=\"resources/static/js/app.js\" /></script>\n");
      out.write("        <script src=\"resources/static/js/service/MGL_Task1.service.js\"></script>\n");
      out.write("        <script src=\"resources/static/js/controller/MGL_Task1.controller.js\"></script>\n");
      out.write("\n");
      out.write("        <!-- Bootstrap CSS -->\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("        <title>Mist Library Task 1-Games</title>\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            body {\n");
      out.write("            \tbackground-image:\n");
      out.write("            \t\turl('https://ak6.picdn.net/shutterstock/videos/1024598666/thumb/1.jpg');\n");
      out.write("            \tbackground-repeat: no-repeat;\n");
      out.write("            \tbackground-size: cover;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/android-chrome-192x192.png\">\n");
      out.write("    \t<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"resources/static/images/favicon-32x32.png\">\n");
      out.write("    \t<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"resources/static/images/favicon-16x16.png\">\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body ng-app=\"MGL_Task1_app\" class=\"ng-cloak\">\n");
      out.write("        <nav id=\"MistLibrary-navbar\" class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n");
      out.write("            <a class=\"navbar-brand\" href=\"/\">\n");
      out.write("\t\t\t<img src=\"resources/static/images/MGLlogo.png\" width=\"90\" height=\"60\" alt=\"\">\n");
      out.write("\t\t</a>\n");
      out.write("            <a class=\"nav-item nav-link\" href=\"games\">Games</a>\n");
      out.write("            <a class=\"nav-item nav-link\" href=\"review\">Review</a>\n");
      out.write("        </nav>\n");
      out.write("        <br>\n");
      out.write("        <div class=\"container\" ng-controller=\"MGL_Task1_Controller as MGL_T1_ctrl\">\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <div class=\"panel-heading text-light\"><span class=\"lead\">Game Registration Form </span></div>\n");
      out.write("                <div class=\"formcontainer\">\n");
      out.write("                    <form ng-submit=\"MGL_T1_ctrl.addGame()\" name=\"gameForm\" class=\"form-horizontal\">\n");
      out.write("                        <input type=\"hidden\" ng-model=\"MGL_T1_ctrl.game.game_id\" />\n");
      out.write("                        <div class=\"row\">\n");
      out.write("                            <div class=\"form-group col-md-12\">\n");
      out.write("                                <label class=\"col-md-2 control-lable text-light\" for=\"game_name\">Name*</label>\n");
      out.write("                                <div class=\"col-md-7\">\n");
      out.write("                                    <input type=\"text\" ng-model=\"MGL_T1_ctrl.game.game_name\" id=\"game_name\" class=\"game_name form-control input-sm\" placeholder=\"Enter the name of the new game [required]\" required ng-minlength=\"3\" />\n");
      out.write("                                    <div class=\"has-error\" ng-show=\"gameForm.$dirty\">\n");
      out.write("                                        <span ng-show=\"gameForm.game_name.$error.required\">This is a required field</span>\n");
      out.write("                                        <span ng-show=\"gameForm.game_name.$error.minlength\">Minimum length required is 3</span>\n");
      out.write("                                        <span ng-show=\"gameForm.game_name.$invalid\">This field is invalid </span>\n");
      out.write("                                    </div>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("                        <div class=\"row\">\n");
      out.write("                            <div class=\"form-group col-md-12\">\n");
      out.write("                                <label class=\"col-md-2 control-lable text-light\" for=\"game_genre\">Game Genre</label>\n");
      out.write("                                <div class=\"col-md-7\">\n");
      out.write("                                    <input type=\"text\" ng-model=\"MGL_T1_ctrl.game.game_genre\" id=\"game_genre\" class=\"form-control input-sm\" placeholder=\"Enter the genre of the new game\" />\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("\n");
      out.write("                        <div class=\"row\">\n");
      out.write("                            <div class=\"form-actions floatRight\">\n");
      out.write("                                <input type=\"submit\" value=\"Add\" class=\"btn btn-primary btn-sm\">\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    </form>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"panel panel-default\">\n");
      out.write("                <!-- Default panel contents -->\n");
      out.write("                <div class=\"panel-heading text-light\"><span class=\"lead\">List of all current games</span></div>\n");
      out.write("                <div class=\"tablecontainer\">\n");
      out.write("                    <table class=\"table table-dark table-striped text-light\">\n");
      out.write("                        <thead>\n");
      out.write("                            <tr>\n");
      out.write("                                <th>Game Name</th>\n");
      out.write("                                <th>Game Genre</th>\n");
      out.write("                                <th width=\"20%\"></th>\n");
      out.write("                            </tr>\n");
      out.write("                        </thead>\n");
      out.write("                        <tbody>\n");
      out.write("                            <tr ng-repeat=\"currentGame in MGL_T1_ctrl.games\">\n");
      out.write("                                <td><span ng-bind=\"currentGame.name\"></span></td>\n");
      out.write("                                <td><span ng-bind=\"currentGame.genre\"></span></td>\n");
      out.write("                                <td>\n");
      out.write("                                </td>\n");
      out.write("                            </tr>\n");
      out.write("                        </tbody>\n");
      out.write("                    </table>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("    <script type=\"text/javascript\"></script>\n");
      out.write("\n");
      out.write("    </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
